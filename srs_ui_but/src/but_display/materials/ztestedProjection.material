fragment_program Depth_FP cg
{
   source depthShaderFP.cg
   entry_point casterFP
   profiles arbfp1
   
   default_params
    {
    }
}

fragment_program Copy_FP cg
{
	source depthShaderFP.cg
	entry_point copyFP
	profiles arbfp1
}

fragment_program combineColorFS_FP cg
{
	source depthShaderFP.cg
	entry_point combineColorFS
	profiles arbfp1
}


vertex_program Depth_VP cg
{
   source depthShaderVP.cg
   entry_point casterVP
   profiles arbvp1

   default_params
    {
        param_named_auto worldViewProj worldviewproj_matrix
    }
}

/******************************************************************************
 *	Depth buffer to texture rendering material 
 */

material depth
{
   technique
   {
   	
   	  scheme myscheme
   
      pass
      {
		//depth_check off
		//depth_write off
		
		vertex_program_ref Depth_VP
		{
		}
		
		fragment_program_ref Depth_FP
		{
		}
		 
		texture_unit
		{
		
		}
			
      }
   }
}

/******************************************************************************
 *	Just copy color from buffer to buffer
 */
material copyColor
{
	technique
	{
		pass
		{
		
		//	fragment_program_ref copy_FP
		//	{
		//	}
			
			texture_unit
			{
		
			}
		
		}
	
	}
}

/******************************************************************************
 *	combine two inputs - if first exists then first, else second
 */
material combineColorFS
{
	technique
	{
		pass
		{
			cull_hardware none
			cull_software none
			depth_check off
		
			fragment_program_ref combineColorFS_FP
			{
			}
			
			texture_unit
			{
				tex_coord_set 0
				tex_address_mode clamp
				filtering none		
			}
			
			texture_unit
			{
				tex_coord_set 0
				tex_address_mode clamp
				filtering none		
			}
		
		}
	
	}
}
